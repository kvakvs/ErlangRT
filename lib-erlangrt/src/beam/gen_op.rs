//! Generated by `codegen/create_gen_op.py`
//! Maps genop table from Erlang/OTP source to Rust
//! Config used: OTP22
#![allow(dead_code)]

use crate::defs::Word;
use crate::emulator::code::opcode::RawOpcode;


pub const OPCODE_MAX: RawOpcode = RawOpcode(168);

pub static ARITY_MAP: &[u8] = &[
    0, // opcode 0 does not exist
    1, // opcode: 1 (label)
    3, // opcode: 2 (func_info)
    0, // opcode: 3 (int_code_end)
    2, // opcode: 4 (call)
    3, // opcode: 5 (call_last)
    2, // opcode: 6 (call_only)
    2, // opcode: 7 (call_ext)
    3, // opcode: 8 (call_ext_last)
    2, // opcode: 9 (bif0)
    4, // opcode: 10 (bif1)
    5, // opcode: 11 (bif2)
    2, // opcode: 12 (allocate)
    3, // opcode: 13 (allocate_heap)
    2, // opcode: 14 (allocate_zero)
    3, // opcode: 15 (allocate_heap_zero)
    2, // opcode: 16 (test_heap)
    1, // opcode: 17 (init)
    1, // opcode: 18 (deallocate)
    0, // opcode: 19 (return)
    0, // opcode: 20 (send)
    0, // opcode: 21 (remove_message)
    0, // opcode: 22 (timeout)
    2, // opcode: 23 (loop_rec)
    1, // opcode: 24 (loop_rec_end)
    1, // opcode: 25 (wait)
    2, // opcode: 26 (wait_timeout)
    4, // opcode: 27 (m_plus)
    4, // opcode: 28 (m_minus)
    4, // opcode: 29 (m_times)
    4, // opcode: 30 (m_div)
    4, // opcode: 31 (int_div)
    4, // opcode: 32 (int_rem)
    4, // opcode: 33 (int_band)
    4, // opcode: 34 (int_bor)
    4, // opcode: 35 (int_bxor)
    4, // opcode: 36 (int_bsl)
    4, // opcode: 37 (int_bsr)
    3, // opcode: 38 (int_bnot)
    3, // opcode: 39 (is_lt)
    3, // opcode: 40 (is_ge)
    3, // opcode: 41 (is_eq)
    3, // opcode: 42 (is_ne)
    3, // opcode: 43 (is_eq_exact)
    3, // opcode: 44 (is_ne_exact)
    2, // opcode: 45 (is_integer)
    2, // opcode: 46 (is_float)
    2, // opcode: 47 (is_number)
    2, // opcode: 48 (is_atom)
    2, // opcode: 49 (is_pid)
    2, // opcode: 50 (is_reference)
    2, // opcode: 51 (is_port)
    2, // opcode: 52 (is_nil)
    2, // opcode: 53 (is_binary)
    2, // opcode: 54 (is_constant)
    2, // opcode: 55 (is_list)
    2, // opcode: 56 (is_nonempty_list)
    2, // opcode: 57 (is_tuple)
    3, // opcode: 58 (test_arity)
    3, // opcode: 59 (select_val)
    3, // opcode: 60 (select_tuple_arity)
    1, // opcode: 61 (jump)
    2, // opcode: 62 (catch)
    1, // opcode: 63 (catch_end)
    2, // opcode: 64 (move)
    3, // opcode: 65 (get_list)
    3, // opcode: 66 (get_tuple_element)
    3, // opcode: 67 (set_tuple_element)
    3, // opcode: 68 (put_string)
    3, // opcode: 69 (put_list)
    2, // opcode: 70 (put_tuple)
    1, // opcode: 71 (put)
    1, // opcode: 72 (badmatch)
    0, // opcode: 73 (if_end)
    1, // opcode: 74 (case_end)
    1, // opcode: 75 (call_fun)
    3, // opcode: 76 (make_fun)
    2, // opcode: 77 (is_function)
    2, // opcode: 78 (call_ext_only)
    2, // opcode: 79 (bs_start_match)
    5, // opcode: 80 (bs_get_integer)
    5, // opcode: 81 (bs_get_float)
    5, // opcode: 82 (bs_get_binary)
    4, // opcode: 83 (bs_skip_bits)
    2, // opcode: 84 (bs_test_tail)
    1, // opcode: 85 (bs_save)
    1, // opcode: 86 (bs_restore)
    2, // opcode: 87 (bs_init)
    2, // opcode: 88 (bs_final)
    5, // opcode: 89 (bs_put_integer)
    5, // opcode: 90 (bs_put_binary)
    5, // opcode: 91 (bs_put_float)
    2, // opcode: 92 (bs_put_string)
    1, // opcode: 93 (bs_need_buf)
    0, // opcode: 94 (fclearerror)
    1, // opcode: 95 (fcheckerror)
    2, // opcode: 96 (fmove)
    2, // opcode: 97 (fconv)
    4, // opcode: 98 (fadd)
    4, // opcode: 99 (fsub)
    4, // opcode: 100 (fmul)
    4, // opcode: 101 (fdiv)
    3, // opcode: 102 (fnegate)
    1, // opcode: 103 (make_fun2)
    2, // opcode: 104 (try)
    1, // opcode: 105 (try_end)
    1, // opcode: 106 (try_case)
    1, // opcode: 107 (try_case_end)
    2, // opcode: 108 (raise)
    6, // opcode: 109 (bs_init2)
    3, // opcode: 110 (bs_bits_to_bytes)
    5, // opcode: 111 (bs_add)
    1, // opcode: 112 (apply)
    2, // opcode: 113 (apply_last)
    2, // opcode: 114 (is_boolean)
    3, // opcode: 115 (is_function2)
    5, // opcode: 116 (bs_start_match2)
    7, // opcode: 117 (bs_get_integer2)
    7, // opcode: 118 (bs_get_float2)
    7, // opcode: 119 (bs_get_binary2)
    5, // opcode: 120 (bs_skip_bits2)
    3, // opcode: 121 (bs_test_tail2)
    2, // opcode: 122 (bs_save2)
    2, // opcode: 123 (bs_restore2)
    5, // opcode: 124 (gc_bif1)
    6, // opcode: 125 (gc_bif2)
    2, // opcode: 126 (bs_final2)
    2, // opcode: 127 (bs_bits_to_bytes2)
    2, // opcode: 128 (put_literal)
    2, // opcode: 129 (is_bitstr)
    1, // opcode: 130 (bs_context_to_binary)
    3, // opcode: 131 (bs_test_unit)
    4, // opcode: 132 (bs_match_string)
    0, // opcode: 133 (bs_init_writable)
    8, // opcode: 134 (bs_append)
    6, // opcode: 135 (bs_private_append)
    2, // opcode: 136 (trim)
    6, // opcode: 137 (bs_init_bits)
    5, // opcode: 138 (bs_get_utf8)
    4, // opcode: 139 (bs_skip_utf8)
    5, // opcode: 140 (bs_get_utf16)
    4, // opcode: 141 (bs_skip_utf16)
    5, // opcode: 142 (bs_get_utf32)
    4, // opcode: 143 (bs_skip_utf32)
    3, // opcode: 144 (bs_utf8_size)
    3, // opcode: 145 (bs_put_utf8)
    3, // opcode: 146 (bs_utf16_size)
    3, // opcode: 147 (bs_put_utf16)
    3, // opcode: 148 (bs_put_utf32)
    0, // opcode: 149 (on_load)
    1, // opcode: 150 (recv_mark)
    1, // opcode: 151 (recv_set)
    7, // opcode: 152 (gc_bif3)
    1, // opcode: 153 (line)
    5, // opcode: 154 (put_map_assoc)
    5, // opcode: 155 (put_map_exact)
    2, // opcode: 156 (is_map)
    3, // opcode: 157 (has_map_fields)
    3, // opcode: 158 (get_map_elements)
    4, // opcode: 159 (is_tagged_tuple)
    0, // opcode: 160 (build_stacktrace)
    0, // opcode: 161 (raw_raise)
    2, // opcode: 162 (get_hd)
    2, // opcode: 163 (get_tl)
    2, // opcode: 164 (put_tuple2)
    3, // opcode: 165 (bs_get_tail)
    4, // opcode: 166 (bs_start_match3)
    3, // opcode: 167 (bs_get_position)
    2, // opcode: 168 (bs_set_position)
];

#[inline]
pub fn opcode_arity(opcode: RawOpcode) -> u8 {
  ARITY_MAP[opcode.get() as usize]
}

const OPCODE_NAME_MAP: &[&str] = &[
        "", // opcode 0 does not exist
    "label", // opcode: 1
    "func_info", // opcode: 2
    "int_code_end", // opcode: 3
    "call", // opcode: 4
    "call_last", // opcode: 5
    "call_only", // opcode: 6
    "call_ext", // opcode: 7
    "call_ext_last", // opcode: 8
    "bif0", // opcode: 9
    "bif1", // opcode: 10
    "bif2", // opcode: 11
    "allocate", // opcode: 12
    "allocate_heap", // opcode: 13
    "allocate_zero", // opcode: 14
    "allocate_heap_zero", // opcode: 15
    "test_heap", // opcode: 16
    "init", // opcode: 17
    "deallocate", // opcode: 18
    "return", // opcode: 19
    "send", // opcode: 20
    "remove_message", // opcode: 21
    "timeout", // opcode: 22
    "loop_rec", // opcode: 23
    "loop_rec_end", // opcode: 24
    "wait", // opcode: 25
    "wait_timeout", // opcode: 26
    "m_plus", // opcode: 27
    "m_minus", // opcode: 28
    "m_times", // opcode: 29
    "m_div", // opcode: 30
    "int_div", // opcode: 31
    "int_rem", // opcode: 32
    "int_band", // opcode: 33
    "int_bor", // opcode: 34
    "int_bxor", // opcode: 35
    "int_bsl", // opcode: 36
    "int_bsr", // opcode: 37
    "int_bnot", // opcode: 38
    "is_lt", // opcode: 39
    "is_ge", // opcode: 40
    "is_eq", // opcode: 41
    "is_ne", // opcode: 42
    "is_eq_exact", // opcode: 43
    "is_ne_exact", // opcode: 44
    "is_integer", // opcode: 45
    "is_float", // opcode: 46
    "is_number", // opcode: 47
    "is_atom", // opcode: 48
    "is_pid", // opcode: 49
    "is_reference", // opcode: 50
    "is_port", // opcode: 51
    "is_nil", // opcode: 52
    "is_binary", // opcode: 53
    "is_constant", // opcode: 54
    "is_list", // opcode: 55
    "is_nonempty_list", // opcode: 56
    "is_tuple", // opcode: 57
    "test_arity", // opcode: 58
    "select_val", // opcode: 59
    "select_tuple_arity", // opcode: 60
    "jump", // opcode: 61
    "catch", // opcode: 62
    "catch_end", // opcode: 63
    "move", // opcode: 64
    "get_list", // opcode: 65
    "get_tuple_element", // opcode: 66
    "set_tuple_element", // opcode: 67
    "put_string", // opcode: 68
    "put_list", // opcode: 69
    "put_tuple", // opcode: 70
    "put", // opcode: 71
    "badmatch", // opcode: 72
    "if_end", // opcode: 73
    "case_end", // opcode: 74
    "call_fun", // opcode: 75
    "make_fun", // opcode: 76
    "is_function", // opcode: 77
    "call_ext_only", // opcode: 78
    "bs_start_match", // opcode: 79
    "bs_get_integer", // opcode: 80
    "bs_get_float", // opcode: 81
    "bs_get_binary", // opcode: 82
    "bs_skip_bits", // opcode: 83
    "bs_test_tail", // opcode: 84
    "bs_save", // opcode: 85
    "bs_restore", // opcode: 86
    "bs_init", // opcode: 87
    "bs_final", // opcode: 88
    "bs_put_integer", // opcode: 89
    "bs_put_binary", // opcode: 90
    "bs_put_float", // opcode: 91
    "bs_put_string", // opcode: 92
    "bs_need_buf", // opcode: 93
    "fclearerror", // opcode: 94
    "fcheckerror", // opcode: 95
    "fmove", // opcode: 96
    "fconv", // opcode: 97
    "fadd", // opcode: 98
    "fsub", // opcode: 99
    "fmul", // opcode: 100
    "fdiv", // opcode: 101
    "fnegate", // opcode: 102
    "make_fun2", // opcode: 103
    "try", // opcode: 104
    "try_end", // opcode: 105
    "try_case", // opcode: 106
    "try_case_end", // opcode: 107
    "raise", // opcode: 108
    "bs_init2", // opcode: 109
    "bs_bits_to_bytes", // opcode: 110
    "bs_add", // opcode: 111
    "apply", // opcode: 112
    "apply_last", // opcode: 113
    "is_boolean", // opcode: 114
    "is_function2", // opcode: 115
    "bs_start_match2", // opcode: 116
    "bs_get_integer2", // opcode: 117
    "bs_get_float2", // opcode: 118
    "bs_get_binary2", // opcode: 119
    "bs_skip_bits2", // opcode: 120
    "bs_test_tail2", // opcode: 121
    "bs_save2", // opcode: 122
    "bs_restore2", // opcode: 123
    "gc_bif1", // opcode: 124
    "gc_bif2", // opcode: 125
    "bs_final2", // opcode: 126
    "bs_bits_to_bytes2", // opcode: 127
    "put_literal", // opcode: 128
    "is_bitstr", // opcode: 129
    "bs_context_to_binary", // opcode: 130
    "bs_test_unit", // opcode: 131
    "bs_match_string", // opcode: 132
    "bs_init_writable", // opcode: 133
    "bs_append", // opcode: 134
    "bs_private_append", // opcode: 135
    "trim", // opcode: 136
    "bs_init_bits", // opcode: 137
    "bs_get_utf8", // opcode: 138
    "bs_skip_utf8", // opcode: 139
    "bs_get_utf16", // opcode: 140
    "bs_skip_utf16", // opcode: 141
    "bs_get_utf32", // opcode: 142
    "bs_skip_utf32", // opcode: 143
    "bs_utf8_size", // opcode: 144
    "bs_put_utf8", // opcode: 145
    "bs_utf16_size", // opcode: 146
    "bs_put_utf16", // opcode: 147
    "bs_put_utf32", // opcode: 148
    "on_load", // opcode: 149
    "recv_mark", // opcode: 150
    "recv_set", // opcode: 151
    "gc_bif3", // opcode: 152
    "line", // opcode: 153
    "put_map_assoc", // opcode: 154
    "put_map_exact", // opcode: 155
    "is_map", // opcode: 156
    "has_map_fields", // opcode: 157
    "get_map_elements", // opcode: 158
    "is_tagged_tuple", // opcode: 159
    "build_stacktrace", // opcode: 160
    "raw_raise", // opcode: 161
    "get_hd", // opcode: 162
    "get_tl", // opcode: 163
    "put_tuple2", // opcode: 164
    "bs_get_tail", // opcode: 165
    "bs_start_match3", // opcode: 166
    "bs_get_position", // opcode: 167
    "bs_set_position", // opcode: 168
];

pub fn opcode_name(opcode: RawOpcode) -> &'static str {
  OPCODE_NAME_MAP[opcode.get() as Word]
}

pub const OPCODE_LABEL: RawOpcode = RawOpcode(1);
pub const OPCODE_FUNC_INFO: RawOpcode = RawOpcode(2);
pub const OPCODE_INT_CODE_END: RawOpcode = RawOpcode(3);
pub const OPCODE_CALL: RawOpcode = RawOpcode(4);
pub const OPCODE_CALL_LAST: RawOpcode = RawOpcode(5);
pub const OPCODE_CALL_ONLY: RawOpcode = RawOpcode(6);
pub const OPCODE_CALL_EXT: RawOpcode = RawOpcode(7);
pub const OPCODE_CALL_EXT_LAST: RawOpcode = RawOpcode(8);
pub const OPCODE_BIF0: RawOpcode = RawOpcode(9);
pub const OPCODE_BIF1: RawOpcode = RawOpcode(10);
pub const OPCODE_BIF2: RawOpcode = RawOpcode(11);
pub const OPCODE_ALLOCATE: RawOpcode = RawOpcode(12);
pub const OPCODE_ALLOCATE_HEAP: RawOpcode = RawOpcode(13);
pub const OPCODE_ALLOCATE_ZERO: RawOpcode = RawOpcode(14);
pub const OPCODE_ALLOCATE_HEAP_ZERO: RawOpcode = RawOpcode(15);
pub const OPCODE_TEST_HEAP: RawOpcode = RawOpcode(16);
pub const OPCODE_INIT: RawOpcode = RawOpcode(17);
pub const OPCODE_DEALLOCATE: RawOpcode = RawOpcode(18);
pub const OPCODE_RETURN: RawOpcode = RawOpcode(19);
pub const OPCODE_SEND: RawOpcode = RawOpcode(20);
pub const OPCODE_REMOVE_MESSAGE: RawOpcode = RawOpcode(21);
pub const OPCODE_TIMEOUT: RawOpcode = RawOpcode(22);
pub const OPCODE_LOOP_REC: RawOpcode = RawOpcode(23);
pub const OPCODE_LOOP_REC_END: RawOpcode = RawOpcode(24);
pub const OPCODE_WAIT: RawOpcode = RawOpcode(25);
pub const OPCODE_WAIT_TIMEOUT: RawOpcode = RawOpcode(26);
pub const OPCODE_M_PLUS: RawOpcode = RawOpcode(27);
pub const OPCODE_M_MINUS: RawOpcode = RawOpcode(28);
pub const OPCODE_M_TIMES: RawOpcode = RawOpcode(29);
pub const OPCODE_M_DIV: RawOpcode = RawOpcode(30);
pub const OPCODE_INT_DIV: RawOpcode = RawOpcode(31);
pub const OPCODE_INT_REM: RawOpcode = RawOpcode(32);
pub const OPCODE_INT_BAND: RawOpcode = RawOpcode(33);
pub const OPCODE_INT_BOR: RawOpcode = RawOpcode(34);
pub const OPCODE_INT_BXOR: RawOpcode = RawOpcode(35);
pub const OPCODE_INT_BSL: RawOpcode = RawOpcode(36);
pub const OPCODE_INT_BSR: RawOpcode = RawOpcode(37);
pub const OPCODE_INT_BNOT: RawOpcode = RawOpcode(38);
pub const OPCODE_IS_LT: RawOpcode = RawOpcode(39);
pub const OPCODE_IS_GE: RawOpcode = RawOpcode(40);
pub const OPCODE_IS_EQ: RawOpcode = RawOpcode(41);
pub const OPCODE_IS_NE: RawOpcode = RawOpcode(42);
pub const OPCODE_IS_EQ_EXACT: RawOpcode = RawOpcode(43);
pub const OPCODE_IS_NE_EXACT: RawOpcode = RawOpcode(44);
pub const OPCODE_IS_INTEGER: RawOpcode = RawOpcode(45);
pub const OPCODE_IS_FLOAT: RawOpcode = RawOpcode(46);
pub const OPCODE_IS_NUMBER: RawOpcode = RawOpcode(47);
pub const OPCODE_IS_ATOM: RawOpcode = RawOpcode(48);
pub const OPCODE_IS_PID: RawOpcode = RawOpcode(49);
pub const OPCODE_IS_REFERENCE: RawOpcode = RawOpcode(50);
pub const OPCODE_IS_PORT: RawOpcode = RawOpcode(51);
pub const OPCODE_IS_NIL: RawOpcode = RawOpcode(52);
pub const OPCODE_IS_BINARY: RawOpcode = RawOpcode(53);
pub const OPCODE_IS_CONSTANT: RawOpcode = RawOpcode(54);
pub const OPCODE_IS_LIST: RawOpcode = RawOpcode(55);
pub const OPCODE_IS_NONEMPTY_LIST: RawOpcode = RawOpcode(56);
pub const OPCODE_IS_TUPLE: RawOpcode = RawOpcode(57);
pub const OPCODE_TEST_ARITY: RawOpcode = RawOpcode(58);
pub const OPCODE_SELECT_VAL: RawOpcode = RawOpcode(59);
pub const OPCODE_SELECT_TUPLE_ARITY: RawOpcode = RawOpcode(60);
pub const OPCODE_JUMP: RawOpcode = RawOpcode(61);
pub const OPCODE_CATCH: RawOpcode = RawOpcode(62);
pub const OPCODE_CATCH_END: RawOpcode = RawOpcode(63);
pub const OPCODE_MOVE: RawOpcode = RawOpcode(64);
pub const OPCODE_GET_LIST: RawOpcode = RawOpcode(65);
pub const OPCODE_GET_TUPLE_ELEMENT: RawOpcode = RawOpcode(66);
pub const OPCODE_SET_TUPLE_ELEMENT: RawOpcode = RawOpcode(67);
pub const OPCODE_PUT_STRING: RawOpcode = RawOpcode(68);
pub const OPCODE_PUT_LIST: RawOpcode = RawOpcode(69);
pub const OPCODE_PUT_TUPLE: RawOpcode = RawOpcode(70);
pub const OPCODE_PUT: RawOpcode = RawOpcode(71);
pub const OPCODE_BADMATCH: RawOpcode = RawOpcode(72);
pub const OPCODE_IF_END: RawOpcode = RawOpcode(73);
pub const OPCODE_CASE_END: RawOpcode = RawOpcode(74);
pub const OPCODE_CALL_FUN: RawOpcode = RawOpcode(75);
pub const OPCODE_MAKE_FUN: RawOpcode = RawOpcode(76);
pub const OPCODE_IS_FUNCTION: RawOpcode = RawOpcode(77);
pub const OPCODE_CALL_EXT_ONLY: RawOpcode = RawOpcode(78);
pub const OPCODE_BS_START_MATCH: RawOpcode = RawOpcode(79);
pub const OPCODE_BS_GET_INTEGER: RawOpcode = RawOpcode(80);
pub const OPCODE_BS_GET_FLOAT: RawOpcode = RawOpcode(81);
pub const OPCODE_BS_GET_BINARY: RawOpcode = RawOpcode(82);
pub const OPCODE_BS_SKIP_BITS: RawOpcode = RawOpcode(83);
pub const OPCODE_BS_TEST_TAIL: RawOpcode = RawOpcode(84);
pub const OPCODE_BS_SAVE: RawOpcode = RawOpcode(85);
pub const OPCODE_BS_RESTORE: RawOpcode = RawOpcode(86);
pub const OPCODE_BS_INIT: RawOpcode = RawOpcode(87);
pub const OPCODE_BS_FINAL: RawOpcode = RawOpcode(88);
pub const OPCODE_BS_PUT_INTEGER: RawOpcode = RawOpcode(89);
pub const OPCODE_BS_PUT_BINARY: RawOpcode = RawOpcode(90);
pub const OPCODE_BS_PUT_FLOAT: RawOpcode = RawOpcode(91);
pub const OPCODE_BS_PUT_STRING: RawOpcode = RawOpcode(92);
pub const OPCODE_BS_NEED_BUF: RawOpcode = RawOpcode(93);
pub const OPCODE_FCLEARERROR: RawOpcode = RawOpcode(94);
pub const OPCODE_FCHECKERROR: RawOpcode = RawOpcode(95);
pub const OPCODE_FMOVE: RawOpcode = RawOpcode(96);
pub const OPCODE_FCONV: RawOpcode = RawOpcode(97);
pub const OPCODE_FADD: RawOpcode = RawOpcode(98);
pub const OPCODE_FSUB: RawOpcode = RawOpcode(99);
pub const OPCODE_FMUL: RawOpcode = RawOpcode(100);
pub const OPCODE_FDIV: RawOpcode = RawOpcode(101);
pub const OPCODE_FNEGATE: RawOpcode = RawOpcode(102);
pub const OPCODE_MAKE_FUN2: RawOpcode = RawOpcode(103);
pub const OPCODE_TRY: RawOpcode = RawOpcode(104);
pub const OPCODE_TRY_END: RawOpcode = RawOpcode(105);
pub const OPCODE_TRY_CASE: RawOpcode = RawOpcode(106);
pub const OPCODE_TRY_CASE_END: RawOpcode = RawOpcode(107);
pub const OPCODE_RAISE: RawOpcode = RawOpcode(108);
pub const OPCODE_BS_INIT2: RawOpcode = RawOpcode(109);
pub const OPCODE_BS_BITS_TO_BYTES: RawOpcode = RawOpcode(110);
pub const OPCODE_BS_ADD: RawOpcode = RawOpcode(111);
pub const OPCODE_APPLY: RawOpcode = RawOpcode(112);
pub const OPCODE_APPLY_LAST: RawOpcode = RawOpcode(113);
pub const OPCODE_IS_BOOLEAN: RawOpcode = RawOpcode(114);
pub const OPCODE_IS_FUNCTION2: RawOpcode = RawOpcode(115);
pub const OPCODE_BS_START_MATCH2: RawOpcode = RawOpcode(116);
pub const OPCODE_BS_GET_INTEGER2: RawOpcode = RawOpcode(117);
pub const OPCODE_BS_GET_FLOAT2: RawOpcode = RawOpcode(118);
pub const OPCODE_BS_GET_BINARY2: RawOpcode = RawOpcode(119);
pub const OPCODE_BS_SKIP_BITS2: RawOpcode = RawOpcode(120);
pub const OPCODE_BS_TEST_TAIL2: RawOpcode = RawOpcode(121);
pub const OPCODE_BS_SAVE2: RawOpcode = RawOpcode(122);
pub const OPCODE_BS_RESTORE2: RawOpcode = RawOpcode(123);
pub const OPCODE_GC_BIF1: RawOpcode = RawOpcode(124);
pub const OPCODE_GC_BIF2: RawOpcode = RawOpcode(125);
pub const OPCODE_BS_FINAL2: RawOpcode = RawOpcode(126);
pub const OPCODE_BS_BITS_TO_BYTES2: RawOpcode = RawOpcode(127);
pub const OPCODE_PUT_LITERAL: RawOpcode = RawOpcode(128);
pub const OPCODE_IS_BITSTR: RawOpcode = RawOpcode(129);
pub const OPCODE_BS_CONTEXT_TO_BINARY: RawOpcode = RawOpcode(130);
pub const OPCODE_BS_TEST_UNIT: RawOpcode = RawOpcode(131);
pub const OPCODE_BS_MATCH_STRING: RawOpcode = RawOpcode(132);
pub const OPCODE_BS_INIT_WRITABLE: RawOpcode = RawOpcode(133);
pub const OPCODE_BS_APPEND: RawOpcode = RawOpcode(134);
pub const OPCODE_BS_PRIVATE_APPEND: RawOpcode = RawOpcode(135);
pub const OPCODE_TRIM: RawOpcode = RawOpcode(136);
pub const OPCODE_BS_INIT_BITS: RawOpcode = RawOpcode(137);
pub const OPCODE_BS_GET_UTF8: RawOpcode = RawOpcode(138);
pub const OPCODE_BS_SKIP_UTF8: RawOpcode = RawOpcode(139);
pub const OPCODE_BS_GET_UTF16: RawOpcode = RawOpcode(140);
pub const OPCODE_BS_SKIP_UTF16: RawOpcode = RawOpcode(141);
pub const OPCODE_BS_GET_UTF32: RawOpcode = RawOpcode(142);
pub const OPCODE_BS_SKIP_UTF32: RawOpcode = RawOpcode(143);
pub const OPCODE_BS_UTF8_SIZE: RawOpcode = RawOpcode(144);
pub const OPCODE_BS_PUT_UTF8: RawOpcode = RawOpcode(145);
pub const OPCODE_BS_UTF16_SIZE: RawOpcode = RawOpcode(146);
pub const OPCODE_BS_PUT_UTF16: RawOpcode = RawOpcode(147);
pub const OPCODE_BS_PUT_UTF32: RawOpcode = RawOpcode(148);
pub const OPCODE_ON_LOAD: RawOpcode = RawOpcode(149);
pub const OPCODE_RECV_MARK: RawOpcode = RawOpcode(150);
pub const OPCODE_RECV_SET: RawOpcode = RawOpcode(151);
pub const OPCODE_GC_BIF3: RawOpcode = RawOpcode(152);
pub const OPCODE_LINE: RawOpcode = RawOpcode(153);
pub const OPCODE_PUT_MAP_ASSOC: RawOpcode = RawOpcode(154);
pub const OPCODE_PUT_MAP_EXACT: RawOpcode = RawOpcode(155);
pub const OPCODE_IS_MAP: RawOpcode = RawOpcode(156);
pub const OPCODE_HAS_MAP_FIELDS: RawOpcode = RawOpcode(157);
pub const OPCODE_GET_MAP_ELEMENTS: RawOpcode = RawOpcode(158);
pub const OPCODE_IS_TAGGED_TUPLE: RawOpcode = RawOpcode(159);
pub const OPCODE_BUILD_STACKTRACE: RawOpcode = RawOpcode(160);
pub const OPCODE_RAW_RAISE: RawOpcode = RawOpcode(161);
pub const OPCODE_GET_HD: RawOpcode = RawOpcode(162);
pub const OPCODE_GET_TL: RawOpcode = RawOpcode(163);
pub const OPCODE_PUT_TUPLE2: RawOpcode = RawOpcode(164);
pub const OPCODE_BS_GET_TAIL: RawOpcode = RawOpcode(165);
pub const OPCODE_BS_START_MATCH3: RawOpcode = RawOpcode(166);
pub const OPCODE_BS_GET_POSITION: RawOpcode = RawOpcode(167);
pub const OPCODE_BS_SET_POSITION: RawOpcode = RawOpcode(168);


